1. sudo apt install postgresql postgresql-contrib
2. set database postgresql's user: postgres pwd:ece568
3. sudo apt-get install -y unixodbc unixodbc-dev odbc-postgresql
4. sudo apt install build-essential
5. sudo apt install libtinyxml2-dev

Download ODB library
sudo wget https://www.codesynthesis.com/download/odb/2.4/odb_2.4.0-1_amd64.deb
odb_2.4.0-1_amd64.deb

6. sudo apt-get install libboost-all-dev

//TODO
//1. create an empty xml string to store the result
//2. give the result xml string a root tag "result"
//3. read the children of the root tag
//4. check if the children are account or position
//5. if account, call checkAccount() to check if the account exists. 
// If exists, add an "error" tag with the account id to the result xml string. And specify the error message as "Account already exists"
// If not, call addAccount() to add the account
//6. if position, call checkPosition() to check if the position exists. 
// If exists, call updatePosition() to update the position. 
// If not, call addPosition() to add the position
string handleCreate(pt::ptree &root)

//TODO
//1. create an empty xml string to store the result
//2. give the result xml string a root tag "result"
//3. read the root tag "trasaction"'s attribute "id", and save it as account_id, check if the account exists
//   3.1 if not, add an "error" tag with the account id to the result xml string. And specify the error message as "Account does not exist". Exit the function.
//   3.2 if yes, continue
//4. read the children of the root tag
//5. check if the children are "order", "query", or "cancel"
//6. if "order", call addOrder() to add the order
//   6.1 place the order in to the matching engine
//   6.2 add an "opened" tag with attributes "sym" = symbol, "amount" = amount, "limit" = limit_price to the result xml string
//7. if "query", call queryTransactions() to query the transactions
//   7.1 iterate the result, and add an "status" tag with "id" = order_id to the result xml string.
//       and depending on the status, add "open" tag with "shares" = amount, 
//                                 or add "canceled" tag with "shares" = amount, "time" = time,
//                                 or add "executed" tag with "shares" = amount, "price" = execute_price, "time" = time
//8. if "cancel", call cancelOrder() to cancel the order
//    8.1 add an "canceled" tag with attributes "id" = order_id to the result xml string  
//    8.2 call queryOpenTransactions() to query the open transactions
//        8.2.1 if result is empty, add an "error" tag with the order id to the result xml string. And specify the error message as "Order does not exist" 
//        8.2.2 if result is not empty, get the result and add an "cancelled" tag with attributes "shares" = amount, "time" = time to the result xml string
//    8.3 call queryExecutedTransactions() to query the executed transactions
//        8.3.2 if result is not empty, get the result and add an "executed" tag with attributes "shares" = amount, "price" = execute_price, "time" = time to the result xml string
//9. return the result xml string
string handleTransaction(pt::ptree &root)